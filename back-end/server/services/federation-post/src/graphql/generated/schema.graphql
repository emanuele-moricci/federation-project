"""
The authentication directive, responsable to check if a type needs authentication to be resolved.
"""
directive @auth on FIELD_DEFINITION

"""Controls the rate of traffic."""
directive @rateLimit(
  """Number of occurrences allowed over duration."""
  limit: Int! = 60

  """Number of seconds before limit is reset."""
  duration: Int! = 60
) on OBJECT | FIELD_DEFINITION

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The Post Model: stores every post in the database"""
type Post @key(fields: "postId") {
  group: Group
  profile: Profile

  """post id"""
  postId: ID!

  """post title"""
  title: String!

  """post description"""
  description: String!

  """post image"""
  image: String

  """was the post edited"""
  edited: Boolean

  """created at"""
  created_at: DateTime!

  """updated at"""
  updated_at: DateTime!

  """deleted row"""
  deleted: Boolean!
}

"""createPost input"""
input createPostInput {
  """The profile id."""
  profileId: Int!

  """The group id."""
  groupId: Int!

  """The post bio."""
  title: String!

  """The post username."""
  description: String!

  """The post phone."""
  image: String
}

"""createPost payload"""
type createPostPayload {
  """The post id."""
  postId: Int
}

extend type Group @key(fields: "groupId") {
  groupId: ID! @external
  posts(
    """Starting record"""
    skip: Int

    """Records shown"""
    take: Int = 20
  ): [Post]
}

extend type Profile @key(fields: "profileId") {
  profileId: ID! @external
  posts(
    """Starting record"""
    skip: Int

    """Records shown"""
    take: Int = 20
  ): [Post]
}

extend type Query {
  """Get all Posts query"""
  Post(
    """Starting record"""
    skip: Int

    """Records shown"""
    take: Int = 100
  ): [Post]
}

extend type Mutation {
  """Creates a Post"""
  createPost(input: createPostInput): createPostPayload
}
