"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A list of all the available authentication methods for the platform"""
enum AuthType {
  PASSWORD
  MFA_CODES
  WEBAUTHN
}

"""A list of all the available roles that a user can have"""
enum Role {
  USER
  ADMIN
}

"""
The Security Model: stores every detail about a user's security methods and data.
"""
type Security @key(fields: "securityId") {
  """security id"""
  securityId: ID!

  """security auth type"""
  type: AuthType!

  """security secret"""
  secret: String!

  """security recovery"""
  recovery: String!

  """security auxiliary"""
  auxiliary: String!

  """security metadata"""
  metadata: String!

  """security user"""
  user: User

  """id of the user"""
  userId: Int!

  """created at"""
  created_at: DateTime!

  """updated at"""
  updated_at: DateTime!

  """deleted row"""
  deleted: Boolean!
}

"""The User Model: stores a user's most important data."""
type User @key(fields: "userId") {
  """user id"""
  userId: ID!

  """user email"""
  email: String!

  """user password"""
  password: String!

  """user auth token"""
  token: String

  """is user active now?"""
  active: Boolean!

  """user role"""
  role: Role!

  """user language"""
  language: Language

  """user country"""
  country: Country

  """user security settings"""
  security: Security

  """user profile"""
  profile: Profile

  """user firstname"""
  firstname: String!

  """user lastname"""
  lastname: String!

  """user handle"""
  username: String

  """user phone"""
  phone: String

  """user address"""
  address: String

  """user avatar"""
  avatar: String

  """user banner"""
  banner: String

  """created at"""
  created_at: DateTime!

  """updated at"""
  updated_at: DateTime!

  """deleted row"""
  deleted: Boolean!
}

"""Login input"""
input loginInput {
  """The user email."""
  email: String!

  """The user password."""
  password: String!
}

"""Login payload"""
type loginPayload {
  """The user token."""
  token: String!
}

"""Register input"""
input registerInput {
  """The user email."""
  email: String!

  """The user password."""
  password: String!

  """The language id."""
  languageId: Int!

  """The country id."""
  countryId: Int!

  """The user first name."""
  firstname: String!

  """The user last name."""
  lastname: String!
}

"""Register payload"""
type registerPayload {
  """The user token."""
  token: String!
}

extend type Language @key(fields: "languageId") {
  languageId: ID! @external
  users: [User]
}

extend type Country @key(fields: "countryId") {
  countryId: ID! @external
  users: [User]
}

extend type Profile @key(fields: "profileId") {
  profileId: ID! @external
  user: User
}

extend type Query {
  """Get all Users query"""
  User(
    """Starting record"""
    skip: Int

    """Records shown"""
    take: Int

    """username string"""
    username: String
  ): [User]

  """Get me query"""
  me: User
}

extend type Mutation {
  """login"""
  login(input: loginInput): loginPayload

  """register"""
  register(input: registerInput): registerPayload
}
