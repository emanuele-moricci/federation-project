"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""The Profile Model: stores every secondary detail of a user"""
type Profile @key(fields: "profileId") {
  """profile id"""
  profileId: ID!

  """profile bio"""
  bio: String

  """profile handle"""
  username: String

  """profile phone"""
  phone: String

  """profile address"""
  address: String

  """profile avatar"""
  avatar: String

  """profile banner"""
  banner: String

  """profile groups"""
  groups: [Group]

  """created at"""
  created_at: DateTime!

  """updated at"""
  updated_at: DateTime!

  """deleted row"""
  deleted: Boolean!
}

"""createProfile input"""
input createProfileInput {
  """The profile bio."""
  bio: String

  """The profile username."""
  username: String

  """The profile phone."""
  phone: String

  """The profile address."""
  address: String

  """The profile avatar."""
  avatar: String

  """The profile banner."""
  banner: String
}

"""createProfile payload"""
type createProfilePayload {
  """The profile id."""
  profileId: Int
}

"""joinGroup input"""
input joinGroupInput {
  """The profile ID."""
  profileId: Int!

  """The group ID."""
  groupId: Int!
}

"""joinGroup payload"""
type joinGroupPayload {
  """The profile ID."""
  profileId: Int!

  """The group ID."""
  groupId: Int!
}

extend type Group @key(fields: "groupId") {
  groupId: ID! @external
  members: [Profile]
}

extend type Mutation {
  """Creates a Profile"""
  createProfile(input: createProfileInput): createProfilePayload

  """Allows a Profile into a group"""
  joinGroup(input: joinGroupInput): joinGroupPayload
}
